import unittest

import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains

class Test_Sauce:
    @classmethod
    def setup_class(cls):
        cls.driver = webdriver.Chrome()
        cls.driver.maximize_window()
        cls.driver.get("https://www.saucedemo.com/")

    @classmethod
    def teardown_class(cls):
        cls.driver.quit()


    def login(self, username, password):
        try:
            username_input = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.ID, "user-name")))
            username_input.clear()
            username_input.send_keys(username)

            password_input = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.NAME, "password")))
            password_input.clear()
            password_input.send_keys(password)

            login_button = WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.ID, "login-button")))
            login_button.click()
        except:
            print("Login failed or timed out.")

# Kullanıcı adı ve şifre alanları boş geçildiğinde uyarı mesajı olarak "Epic sadface: Username is required" gösterilmelidir.
    def test_blank_fields(self):
        self.login("", "")
        try:
            error_message = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, "#login_button_container > div > form > div.error-message-container.error")))
            assert error_message.text == "Epic sadface: Username is required"
            print("Empty Fields Test Result: PASS")
        except NoSuchElementException:
            print("Element not found.")

# Sadece şifre alanı boş geçildiğinde uyarı mesajı olarak "Epic sadface: Password is required" gösterilmelidir.
    def test_blank_password(self):
        self.login("standard_user", "")
        try:
            WebDriverWait(self.driver, 10).until( EC.visibility_of_element_located((By.XPATH, "//*[@id=\"login_button_container\"]/div/form/div[3]")))
            errorMessage = self.driver.find_element(By.XPATH, "//*[@id=\"login_button_container\"]/div/form/div[3]")
            assert errorMessage.text == "Epic sadface: Password is required"
            print(f"Empty Password Test Result: ")
        except NoSuchElementException:
            print("Element not found.")

# Kullanıcı adı "locked_out_user" şifre alanı "secret_sauce" gönderildiğinde "Epic sadface: Sorry, this user has been locked out." mesajı gösterilmelidir.
    def test_locked_out_user(self):
        self.login("locked_out_user", "secret_sauce")
        try:
            WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, "#login_button_container > div > form > div.error-message-container.error")))
            errorMessage = self.driver.find_element(By.CSS_SELECTOR,"#login_button_container > div > form > div.error-message-container.error")
            assert errorMessage.text == "Epic sadface: Sorry, this user has been locked out."
            print(f"Locked Out User Test Result: ")
        except NoSuchElementException:
            print("Element not found.")
@pytest.mark.skip
# Kullanıcı adı "standard_user" şifre "secret_sauce" gönderildiğinde kullanıcı "/inventory.html" sayfasına gönderilmelidir. Giriş yapıldıktan sonra kullanıcıya gösterilen ürün sayısı "6" adet olmalıdır.

    def test_success_login(self):
        self.login("standard_user", "secret_sauce")
        try:
            WebDriverWait(self.driver, 10).until(EC.url_to_be("https://www.saucedemo.com/inventory.html"))
            product_list = self.driver.find_elements(By.CLASS_NAME, "inventory_item")
            assert len(product_list) == 6
            print("Successful Login Test Result: PASS")
        except AssertionError:
            print("Successful Login Test Result: FAIL")
        except:
            print("Test failed or timed out.")

# Bir tane de siz bulunuz.ilk ürünü sepete ekle
    def test_add_first_product_to_cart(self):
        self.login("standard_user", "secret_sauce")

# Ürünü sepete ekle
    def add_to_cart(self):
        add_to_cart_button = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.XPATH, "//button[@data-test='add-to-cart-sauce-labs-backpack']")))
        add_to_cart_button.click()

# Sepetteki ürün sayısını kontrol et
        cart_badge = WebDriverWait(self.driver, 10).until(
        EC.visibility_of_element_located((By.CLASS_NAME, "shopping_cart_badge")))
        assert cart_badge.text == "1", "Sepette 1 ürün yok!"
        print("Doğrulama başarılı: Sepette 1 ürün var.")


# Burger menüye tıklayıp logout'a basınca çıkış yapılması test edilecek.
    def burger_menu(self):
        burger_menu_button = WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located((By.XPATH, "//*[@id='react-burger-menu-btn']")))
        burger_menu_button.click()

    def test_logout_from_burger_menu(self):
            self.test_success_login()
            self.burger_menu()

# "Logout" öğesini bul ve tıkla
            logout_button = WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located((By.ID, "logout_sidebar_link")))
            logout_button.click()

# Çıkış yapıldıktan sonra login sayfasının yüklendiğini doğrula
            login_button = WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located((By.ID, "login-button")))
            assert login_button.is_displayed(), "Logout işlemi başarısız oldu."
            print("Logout Test Result: PASS")


#Continue shopping butonuna basınca bir önceki sayfayı açan test case.
    def sepet(self):
        sepet_button = WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located((By.XPATH, "//*[@id='shopping_cart_container']/a ")))
        sepet_button.click()

    def test_sepet(self):
            self.test_success_login()
            self.sepet()

# "continue shopping" öğesini bul ve tıkla
            logout_button = WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located((By.ID, "continue-shopping")))
            logout_button.click()

# Bir önceki sayfaya dön
            self.driver.back()

# Bir önceki sayfanın yüklendiğini doğrula
            assert "Swag Labs" in self.driver.title
            print("Continue Shopping Test Result: PASS")
# Ürün sıralaması testi
    def test_product_sorting(self):
        self.login("standard_user", "secret_sauce")
        sort_dropdown = WebDriverWait(self.driver, 20).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "product_sort_container")))
        sort_dropdown.click()
        sort_option_low_to_high = WebDriverWait(self.driver, 20).until(
            EC.visibility_of_element_located((By.XPATH, "//option[@value='lohi']")))
        sort_option_low_to_high.click()
        first_product_price_sorted = WebDriverWait(self.driver, 20).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "inventory_item_price")))
        assert first_product_price_sorted.text == "$7.99", "Ürünler düşükten yükseğe doğru sıralanmadı"



